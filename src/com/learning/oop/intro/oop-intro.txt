
************** OOp in Java  ****************

OOP definition: is a programming paradigm based on object.
It is a software design approach in which concept of object occupies the first place.

Object: object is always an instance of a class, it usually has properties and methods.

Class: is a template for the object.

Advantages of oop: Modularity, Scalability, Lower cost of development, Security and Reliability.

1/Scalability: OOP makes it easier to scale a program to handle an increasing amount of work or data.
2/Maintainability: OOp allows us to add new features without the need to change the existing code.
The OOP makes it easier to maintain and update existing code, as well as to fix bugs.
3/Lower cost of development: OOp is a lot lower cost and time the procedural programming.
4/Security and Reliability: Encapsulation and inheritance are two key features of OOP languages that can help you secure your code.

OOP principles :

1/Inheritance: Allows you to extend classes and inherit their properties and methods and reuse them without the need to recreate them or reinvent the wheel.

2/Polymorphism: We can have one interface and multiple implementations. (For example for engine of car electric or gasoline) It allows us
to write methods in many forms using overriding @override and overloading(Overload the methods signature).

3/Abstraction: Allows us to not duplicate the code , regroup the common properties and features in one class

4/Encapsulation: Keeps the data safe from external interference using the modifiers : private , default, protected, public

************** Classes ****************

1/ Concrete Class: a class that has an implementation for all of its methods. They cannot have any unimplemented methods.
 It can also extend an abstract class or implement an interface as long as it implements all their methods.
 It is a complete class and can be instantiated using 'new' keyword.

2/ Abstract Class:  is a restricted class that cannot be used to create objects (to access it, it must be inherited from another class).
It is useful to reduce the system's complexity by hiding some implementation details. It can not be instantiated.
Abstract classes can have implemented and abstract methods. These methods must be implemented using override when the abstract class is extended
By a subclass unless the subclass is abstract too so we don't have to implement all of it's methods.
==> An abstract class can not be extended with other classes while interfaces allow multiple implementations for the same class.
==========> We can declare all type of fields inside the abstract class.

3/ Nested Class: In Java, it is possible to define a class within another class, such classes are known as nested classes.
They enable you to logically group classes that are only used in one place,
 thus this increases the use of encapsulation and creates more readable and maintainable code.
 We can create a nested class using static class as an inner class within our target class Or we can create it simply as non-static class.

4/ Anonymous Class: The anonymous class in Java is a way to create an unnamed class that extends a superclass or implements an interface on the fly.
 They are often used for one-time implementations or event handlers.

5/ Interface:  is defined as an abstract type used to specify the behavior of a class. An interface in Java is a blueprint of a behavior.
 A Java interface contains static constants and abstract methods.  It can not be instantiated.
 Interfaces can have only abstract methods that must be implemented using override after its implementation by the subclass . in Java11+ we can implement
 and instantiate An interface .
==> An abstract class can not be extended with other classes while interfaces allow multiple implementations for the same class.
==========> We can declare only Constant fields inside the interface.

6/ Static CLass: Java allows us to define a class within a class that is known as a nested class.
 It may be static or non-static. The major difference between static and non-static class is that:
An instance of the static nested class can be created without creating an instance of its outer class.


****************************** Solid Principles ********************************


  ====> SOLID principles are object-oriented design concepts relevant to software development. SOLID is an acronym for five other class-design principles:
  Single Responsibility Principle, Open-Closed Principle, Liskov Substitution Principle, Interface Segregation Principle, and Dependency Inversion Principle.



1/ Single Responsibility Principle:

  - Each Class should only have one sole purpose, and not be filled with excessive functionalities.


2/ Open Closed Principle:

  - Classes should be open for extension, closed for modification.
  - In other words, you should not have to rewrite an existing class for implementing new features.


3/ Liskov Substitution Principle:

  - Every Subclass or derived class should be substitutable for their base or parent class.


4/ Interface Segregation Principle:

  - Interfaces should not force classes to implement what they can't do.
  - Large interfaces should be divided into small ones.

5/ Dependency Inversion Principle:

  - Components should depend on abstraction (abstract classes or interfaces) and not concretion (Concrete classes).




